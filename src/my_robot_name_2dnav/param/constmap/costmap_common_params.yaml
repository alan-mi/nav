max_obstacle_height: 2.0 #传感器读数的最大有效高度，单位为 meters; 通常设置为略高于机器人的实际高度，高度是指包含机械臂打直情况下的最大高度。
robot_radius: 0.1 # 设置机器人的半径，单位是米。由于在stdr中机器人是圆形的，所以可以直接设置该参数。如果你的机器人不是圆形的那就需要使用footprint这个参数
#footprint: [[-0.24, -0.22], [-0.24, 0.22], [0.24, 0.22], [0.24, -0.22]]

map_type: costmap # 地图类型，这里为voxel(体素地图)。另一种地图类型为costmap(代价地图)。这两者之间的区别是前者是世界的3D表示，后者为世界的2D表示。

# Static Map Layer：静态地图层，基本上不变的地图层，通常都是SLAM建立完成的静态地图。
# Obstacle Map Layer：障碍地图层，用于动态的记录传感器感知到的障碍物信息。
# Inflation Layer：膨胀层，在以上两层地图上进行膨胀（向外扩张），以避免机器人的撞上障碍物。
# Other Layers：你还可以通过插件的形式自己实现costmap，目前已有Social Costmap Layer、Range Sensor Layer等开源插件。

obstacle_layer:
  enabled: true # 是否启用该层
  combination_method: 1 # 只能设置为0或1，用来更新地图上的代价值，一般设置为1;
  track_unknown_space: true # 如果设置为false，那么地图上代价值就只分为致命碰撞和自由区域两种，如果设置为true，那么就分为致命碰撞，自由区域和未知区域三种。
  obstacle_range: 2.5 # 设置机器人检测障碍物的最大范围，意思是说超过该范围的障碍物，并不进行检测，只有靠近到该范围内才把该障碍物当作影响路径规划和移动的障碍物;
  raytrace_range: 3.0 # 在机器人移动过程中，实时清除代价地图上的障碍物的最大范围，更新可自由移动的空间数据。假如设置该值为3米，那么就意味着在3米内的障碍物，本来开始时是有的，但是本次检测却没有了，那么就需要在代价地图上来更新，将旧障碍物的空间标记为可以自由移动的空间。
  observation_sources: scan #camera #bump # 设置导航中所使用的传感器，这里可以用逗号形式来区分开很多个传感器，例如激光雷达，碰撞传感器，超声波传感器等，我们这里只设置了激光雷达;
  scan:
    # sensor_frame:  # 激光雷达传感器的坐标系名称;
    data_type: LaserScan # 激光雷达数据类型;
    topic: scan # 激光雷达数据类型;
    marking: true # 是否可以使用该传感器来标记障碍物;
    clearing: true  # 是否可以使用该传感器来清除障碍物标记为自由空间;
    min_obstacle_height: 0
    max_obstacle_height: 2
  camera:
    data_type: PointCloud2
    topic: camera/depth/points
#    topic: camera/depth_registered/points
    marking: true
    clearing: true
    min_obstacle_height: 0.0
    max_obstacle_height: 1.0


inflation_layer:
  enabled: true
  cost_scaling_factor: 2.8 # 膨胀过程中应用到代价值的比例因子
  inflation_radius: 0.6 # 膨胀半径，膨胀层会把障碍物代价膨胀直到该半径为止，一般将该值设置为机器人底盘的直径大小。如果机器人经常撞到障碍物就需要增大该值，若经常无法通过狭窄地方就减小该值。


static_layer:
  enabled: true

#transform_tolerance: 0.13
#publish_voxel_map: true

#map_type: costmap