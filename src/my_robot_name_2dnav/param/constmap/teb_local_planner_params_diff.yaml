TebLocalPlannerROS:

 odom_topic: odom
    
 # Trajectory

 teb_autosize: true
 dt_ref: 0.6 #期望的轨迹时间分辨率 设置较小会出现来回摆动现象
 dt_hysteresis: 0.1 #根据当前时间分辨率自动调整大小的滞后现象，通常约为。建议使用dt ref的10%。
 max_samples: 500
 global_plan_overwrite_orientation: true #覆盖由全局规划器提供的局部子目标的方向 true 会向后行走
 allow_init_with_backwards_motion: false
 max_global_plan_lookahead_dist: 3.0 # 决定局部规划初始轨迹的最大长度，实际调试发现此参数无需过大，因为局部轨迹在每个控制周期都被更新，实际执行的指令仅是轨迹上第一个点的速度值，这里设置为1.5即可，过长也可能导致优化结果无法有效收敛；
 global_plan_viapoint_sep: 1  #如果为正值，则通过点（via-points ）从全局计划（路径跟踪模式）展开，该值确定参考路径的分辨率（沿着全局计划的每两个连续通过点之间的最小间隔，可以参考参数weight_viapoint来调整大小
 global_plan_prune_distance: 1 # 因为全局路径是从全局起始点到全局目标点的一条轨迹，而初始的局部路径仅是从机器人当前位置到局部目标点的一小段路径，全局路径裁剪其中一部分即局部路径，该参数决定了从机器人当前位置的后面一定距离开始裁剪；
 exact_arc_length: false # 如果为true，则计划程序在速度，加速度和转弯速率计算中使用精确的弧长（->增加的cpu时间），否则使用欧几里得近似。
 feasibility_check_no_poses: 5 # 在判断生成的轨迹是否冲突时使用，此时设置为3，即从轨迹起点开始逐个检查轨迹上的3个点，若3个点均不发生碰撞，则认为本次轨迹有效，由于teb优化并非硬约束，这里相当于是轨迹生成之后的一层保障，这个参数因根据机器人的速度和环境复杂程度调整，否则极有可能出现在狭窄环境中走走停停的情况；
 publish_feedback: false # 发布包含完整轨迹和动态障碍的列表的规划器反馈
    
 # Robot
         
 max_vel_x: 0.5
 max_vel_x_backwards: 0.5
 max_vel_y: 0.0
 max_vel_theta: 1
 acc_lim_x: 1
 acc_lim_y: 0.0
 acc_lim_theta: 1
 min_turning_radius: 0.0 # diff-drive robot (can turn on place!)
# cmd_angle_instead_rotvel: false
# wheelbase: 0.0

 footprint_model:
   type: "point"
   radius: 0.1

 # GoalTolerance
    
 xy_goal_tolerance: 0.3 #目标位置的允许距离误差
 yaw_goal_tolerance: 0.2 #目标位置的允许角度误差
 free_goal_vel: false # “free_goal_vel”参数设置机器人在目标点速度的情况，Fasle为默认最终速度为0，即到目标位置的时候应该是保持静止状态。
 complete_global_plan: true
    
 # Obstacles
    
 min_obstacle_dist: 0.15 # 与障碍的最小期望距离,注意，teb_local_planner本身不考虑膨胀半径
 inflation_dist: 0.4 # 膨胀距离 障碍物周围缓冲区(应大于min_obstacle_dist才能生效)
 include_costmap_obstacles: true #应否考虑到局部costmap的障碍
 costmap_obstacles_behind_robot_dist: 1.5
 obstacle_poses_affected: 3

 dynamic_obstacle_inflation_dist: 0.3
 include_dynamic_obstacles: true

 costmap_converter_plugin: ""
 costmap_converter_spin_thread: true #如果为true，则costmap转换器将以不同的线程调用其回调队列
 costmap_converter_rate: 5 #定义costmap_converter插件处理当前costmap的频率

 # Optimization
    
 no_inner_iterations: 3  # 较少迭代次数可以提高运行稳定性 设置较大不容易找到最优路线，容易出现路线跳跃
 no_outer_iterations: 2  # 较少迭代次数可以提高运行稳定性
 optimization_activate: true
 optimization_verbose: false
 penalty_epsilon: 0.0 #为硬约束近似的惩罚函数添加一个小的安全范围  极大的影响优化结果  太大会导致不能收敛 优化问题会变得病态
 obstacle_cost_exponent: 4
 weight_max_vel_x: 2 #满足最大允许平移速度的优化权重 不设置 penalty_epsilon 速度惩罚函数 不起作用
 weight_max_vel_theta: 1 #满足最大允许平移速度的优化权重
 weight_acc_lim_x: 1 #满足最大允许平移加速度的优化权重。
 weight_acc_lim_theta: 1 #满足最大允许角加速度的优化权重。
 weight_kinematics_nh: 3000 # #运动学的优化权重 参数应设置较小值，因为我们是完整约束机器人无需限制其运动学约束。
 weight_kinematics_forward_drive: 1000 #强制机器人仅选择正向（正的平移速度）的优化权重
 weight_kinematics_turning_radius: 0.0  #采用最小转向半径的优化权重  调大参数会靠近障碍物
 weight_optimaltime: 0.6 # must be > 0 #根据转换/执行时间对轨迹进行收缩的优化权重。 太大会导致穿越障碍物
 weight_shortest_path: 0
 weight_obstacle: 10 #保持与障碍物的最小距离的优化权重 设置小一点得值 太大会导致不能收敛 优化问题会变得病态
 weight_inflation: 0.1 #膨胀半径权重
 weight_dynamic_obstacle: 10
 weight_dynamic_obstacle_inflation: 0.2
 weight_viapoint: 2 #跟踪全据路径的权重
 weight_adapt_factor: 2 #迭代地增加某些权重

 # Homotopy Class Planner

 enable_homotopy_class_planning: true #激活并行规划（因为一次优化多个轨迹，占用更多的CPU资源
 enable_multithreading: true  #激活多个线程，以便在不同的线程中规划每个轨迹
 max_number_classes: 4 #考虑到的不同轨迹的最大数量
 selection_cost_hysteresis: 1.0 #轨迹成本
 selection_prefer_initial_plan: 0.9 #障碍物成本
 selection_obst_cost_scale: 100.0
 selection_alternative_time_cost: false #如果为真，时间成本(时间差平方和)被总转移时间(时间差和)所替代。
 
 roadmap_graph_no_samples: 15 #指定为创建路线图而生成的样本数
 roadmap_graph_area_width: 5 #指定该区域的宽度
 roadmap_graph_area_length_scale: 1.0
 h_signature_prescaler: 0.5 #（0.2 < value <= 1）缩放用于区分同伦类的内部参数 #警告：只能减少此参数，如果在局部costmap中遇到太多障碍物的情况，请勿选择极低值，否则无法将障碍物彼此区分开线缩放用于区分同伦类的内部参数（H-signature）。
 h_signature_threshold: 0.1 #如果实部和复部的差都低于规定的阈值，则假定两个h签名相等。
 obstacle_heading_threshold: 0.45 #指定障碍标头和目标标头之间的标量积的值，以便将(障碍)考虑到勘探中
 switching_blocking_period: 0.0
 viapoints_all_candidates: true
 delete_detours_backwards: true
 max_ratio_detours_duration_best_duration: 3.0
 visualize_hc_graph: false  #可视化创建的图形，用于探索不同的轨迹（在rviz中检查标记消息）
 visualize_with_time_as_z_axis_scale: false #如果为真，则不同拓扑的所有轨迹都附加到这组vio -points上，否则只有共享与初始/全局计划相同拓扑的轨迹与它们连接

# Recovery
 
 shrink_horizon_backup: true
 shrink_horizon_min_duration: 10
 oscillation_recovery: true
 oscillation_v_eps: 0.1
 oscillation_omega_eps: 0.1
 oscillation_recovery_min_duration: 10
 oscillation_filter_duration: 10
